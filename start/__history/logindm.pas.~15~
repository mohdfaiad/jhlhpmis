unit logindm;

interface

uses
  System.SysUtils, System.Classes, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Error, FireDAC.UI.Intf, FireDAC.Phys.Intf, FireDAC.Stan.Def,
  FireDAC.Stan.Pool, FireDAC.Stan.Async, FireDAC.Phys, FireDAC.Phys.SQLite,
  FireDAC.Phys.SQLiteDef, FireDAC.VCLUI.Wait, FireDAC.Stan.ExprFuncs,
  FireDAC.Stan.Param, FireDAC.DatS, FireDAC.DApt.Intf, FireDAC.DApt, Data.DB,
  FireDAC.Comp.DataSet, FireDAC.Comp.Client,VCL.Forms,staticstr;

type
  Tlogindatamod = class(TDataModule)
    FDConnection1: TFDConnection;
    FDPhysSQLiteDriverLink1: TFDPhysSQLiteDriverLink;
    loginfdquery: TFDQuery;
  private
    { Private declarations }
    FUsername:string;
    FPassword:string;
  public
    { Public declarations }
    property Username:string read FUsername write FUsername;
    property Password:string read FPassword write FPassword;
    procedure login;
  end;

var
  logindatamod: Tlogindatamod;


implementation

{%CLASSGROUP 'Vcl.Controls.TControl'}

{$R *.dfm}

{ Tlogindatamod }

procedure Tlogindatamod.login;
var
 apppath:string;
begin
  apppath:=ExtractFilePath(Application.Exename);
  FDPhysSQLiteDriverLink1.VendorLib:=apppath+sqlite3Dll;
  FDConnection1.Params.Database:=apppath+databasename;
  //FDConnection1.Params.Password:=sqlite3password;
  if not FileExists(FDConnection1.Params.Database) then
    raise Exception.Create('数据库文件未找到');
  if not FDConnection1.Connected then
    FDConnection1.Connected:=true;
  loginfdquery.SQL.Clear;
  loginfdquery.Open(format(LOGIN_SQL,[Username,Password]));
  if loginfdquery.RecordCount=0 then
    raise Exception.Create('用户名或密码错误 ');
end;

end.
